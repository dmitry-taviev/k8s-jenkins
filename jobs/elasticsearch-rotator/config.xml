<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>* * * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>server=$(kubectl config view -o jsonpath=&apos;{.clusters[?(@.name == &quot;aws_smart-cluster&quot;)].cluster.server}&apos;)
user=$(kubectl config view -o jsonpath=&apos;{.users[?(@.name == &quot;aws_smart-cluster-basic-auth&quot;)].user.username}&apos;)
pass=$(kubectl config view -o jsonpath=&apos;{.users[?(@.name == &quot;aws_smart-cluster-basic-auth&quot;)].user.password}&apos;)
elastic_path=&apos;api/v1/proxy/namespaces/kube-system/services/elasticsearch-logging&apos;
ok=0
timeout=3
until [ $ok -eq 1 ]; do
        json=$(curl --insecure -u $user:$pass &quot;$server/$elastic_path/_cluster/health?level=indices&quot;)
        status=$(echo $json | jq -r .status)
    if [ $status != &apos;red&apos; ]; then
        echo &quot;status ok\n&quot;
        ok=1
    else
        echo &quot;status RED - rotating..\n&quot;
        oldest=$(echo $json | jq .indices | jq &apos;keys&apos; | jq .[1])
        curl --insecure -u $user:$pass -XDELETE &quot;$server/$elastic_path/$oldest&quot;
        sleep $timeout
    fi
done</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>